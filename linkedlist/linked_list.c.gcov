        -:    0:Source:linked_list.c
        -:    0:Graph:linked_list.gcno
        -:    0:Data:linked_list.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "linked_list.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:
function add_to_list called 3 returned 100% blocks executed 87%
        3:    6:int add_to_list(linked_list *ll, char *s) {
        3:    6-block  0
        3:    7:	struct linked_list *list = ll;
        -:    8:
        3:    9:	if (*s == '\0') return -1;
        3:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    $$$$$:    9-block  1
unconditional  2 never executed
        -:   10:
        -:   11:	// If head data is NULL, set the input as head of linked list
        3:   12:	if (list->data == NULL) {
        3:   12-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   13:		list->data = s;
        1:   14:		return list->index;
        1:   14-block  0
unconditional  0 taken 1
        -:   15:	}
        -:   16:
        2:   17:	struct linked_list * item = (linked_list*)malloc(sizeof(linked_list));
        2:   18:	int index = 0;
        -:   19:
        2:   20:	if (!item) {
        2:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   21:		return -1;
    $$$$$:   21-block  0
unconditional  0 never executed
        -:   22:	}
        -:   23:
        2:   24:	item->data = s;
        2:   25:	item->next = NULL;
        -:   26:
        3:   27:	while(list) {
        2:   27-block  0
unconditional  0 taken 2
        3:   27-block  1
branch  1 taken 3
branch  2 taken 0 (fallthrough)
        3:   28:		if (list->index > index) index = list->index;
        3:   28-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   28-block  1
unconditional  2 taken 1
        3:   29:		if (!list->next) break;
        3:   29-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   29-block  1
unconditional  2 taken 2
        -:   30:
        1:   31:		list = list->next;
        1:   31-block  0
unconditional  0 taken 1
        -:   32:	}
        -:   33:
        2:   34:	item->index = ++index;
        2:   35:	list->next = item;
        2:   36:	return item->index;
        2:   36-block  0
unconditional  0 taken 2
        -:   37:}
        -:   38:
function display_list called 2 returned 100% blocks executed 89%
        2:   39:int display_list(linked_list *ll) {
        2:   39-block  0
        2:   40:	struct linked_list *list = ll;
        2:   41:	int cnt = 0;
        -:   42:
        2:   43:	printf("Linked List:\n");
        2:   43-block  0
call    0 returned 2
        -:   44:
        2:   45:	if(!list) return 0;
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    $$$$$:   45-block  0
unconditional  2 never executed
        -:   46:
        7:   47:	while(list) {
        2:   47-block  0
unconditional  0 taken 2
        7:   47-block  1
branch  1 taken 5
branch  2 taken 2 (fallthrough)
        5:   48:		printf("\tIndex %d: %s\n", list->index, list->data);
        5:   48-block  0
call    0 returned 5
        5:   49:		++cnt;
        5:   50:		list = list->next;
unconditional  0 taken 5
        -:   51:	}
        -:   52:
        2:   53:	return cnt;
        2:   53-block  0
unconditional  0 taken 2
        -:   54:}
        -:   55:
function display_item called 1 returned 100% blocks executed 80%
        1:   56:int display_item(linked_list *ll) {
        1:   56-block  0
        1:   57:	return ll ? 0 : -1;
        1:   57-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   57-block  1
unconditional  2 taken 1
    $$$$$:   57-block  2
unconditional  3 never executed
        1:   57-block  3
unconditional  4 taken 1
        -:   58:}
        -:   59:
function search_from_list called 1 returned 100% blocks executed 86%
        1:   60:linked_list * search_from_list(linked_list *ll, char *s) {
        1:   60-block  0
        1:   61:	struct linked_list *list = ll;
        3:   62:	while (list) {
        1:   62-block  0
unconditional  0 taken 1
        3:   62-block  1
branch  1 taken 3
branch  2 taken 0 (fallthrough)
        3:   63:		if (list->data == s) {
        3:   63-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   64:			return list;
        1:   64-block  0
unconditional  0 taken 1
        -:   65:		}
        -:   66:
        2:   67:		list = list->next;
        2:   67-block  0
unconditional  0 taken 2
        -:   68:	}
        -:   69:
    #####:   70:	return NULL;
    $$$$$:   70-block  0
unconditional  0 never executed
        -:   71:}
        -:   72:
function delete_from_list called 1 returned 100% blocks executed 86%
        1:   73:int delete_from_list(linked_list *ll, int index) {
        1:   73-block  0
        1:   74:	struct linked_list *list = ll, *prev = ll;
        3:   75:	while (list) {
        1:   75-block  0
unconditional  0 taken 1
        3:   75-block  1
branch  1 taken 3
branch  2 taken 0 (fallthrough)
        3:   76:		if (list->index == index) {
        3:   76-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   77:			prev->next = list->next;
        1:   78:			return display_list(ll);
        1:   78-block  0
call    0 returned 1
unconditional  1 taken 1
        -:   79:		}
        2:   80:		prev = list;
        2:   81:		list = list->next;
        2:   81-block  0
unconditional  0 taken 2
        -:   82:	}
        -:   83:
    #####:   84:	return -1;
    $$$$$:   84-block  0
unconditional  0 never executed
        -:   85:}
